using DevExpress.XtraBars;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SQLite;

namespace Automation
{
    public partial class MainMenu : DevExpress.XtraBars.FluentDesignSystem.FluentDesignForm
    {
        Kullanici kullanici = new Kullanici();
        Kullanici calisan = new Kullanici();
        Urun urun = new Urun();
        

        public string connectionString = @"Data Source= ..\..\Database\database.db; version=3;";

        int yetki = 0;       

        string urunSelectCmd = "SELECT * FROM Urunler";
        string kisiSelectCmd = "SELECT * FROM Kullanicilar";
        SQLiteDataAdapter adapter = new SQLiteDataAdapter();
        DataTable dataTable = new DataTable();



        public MainMenu(Kullanici kullanici)
        {
            InitializeComponent();

            this.kullanici = kullanici;
            switch (kullanici.Pozisyon)
            {
                case "Müdür":
                    {
                        yetki = 5;
                        break;
                    }
                case "Yardımcı Müdür":
                    {
                        yetki = 4;
                        break;
                    }
                case "Depo Sorumlusu":
                    {
                        yetki = 3;
                        break;
                    }
                case "Satış Danışmanı":
                    {
                        yetki = 2;
                        break;
                    }
                case "Kasiyer":
                    {
                        yetki = 1;
                        break;
                    }

            }
            switch (yetki)
            {
                // Müdür Yetkisi
                case 5:
                    {
                        calisanMainGroup.Visible = true;
                        urunlerMainGroup.Visible = true;
                        stokMainGroup.Visible = true;
                        satisMainGroup.Visible = true;
                        break;
                    }
                // Yardımcı Müdür Yetkisi
                case 4:
                    {
                        calisanMainGroup.Visible = true;
                        urunlerMainGroup.Visible = true;
                        break;
                    }
                // Depo Sorumlusu Yetkisi
                case 3:
                    {
                        urunlerMainGroup.Visible = true;
                        urunEkle.Visible = false;
                        urunDuzenle.Visible = false;
                        urunSil.Visible = false;

                        break;
                    }
                // Satış Danışmanı Yetkisi
                case 2:
                    {
                        urunlerMainGroup.Visible = true;
                        urunEkle.Visible = false;
                        urunDuzenle.Visible = false;
                        urunSil.Visible = false;


                        break;
                    }
                // Kasiyer yetkisi
                case 1:
                    {
                        urunlerMainGroup.Visible = true;
                        urunEkle.Visible = false;
                        urunDuzenle.Visible = false;
                        urunSil.Visible = false;


                        break;
                    }
            }

            UrunlerSource.Fill();
            KullanicilarSource.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            UrunlerSource.Fill();
        }

        #region Çalışan Menüsü
        // Çalışan menüsü butonları
        private void calisanListele_Click(object sender, EventArgs e)
        {
            gbCalisanSearch.Location = new Point(10, 10);

            KullanicilarSource.Fill();

            gbCalisanKontrol.Show();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            gbCalisanInfo.Hide();
            gbCalisanSearch.Show();
            gbCalisanSelect.Hide();

            calisanList.Show();
        }
        private void calisanEkle_Click(object sender, EventArgs e)
        {
            gbCalisanSearch.Location = new Point(10, 340);

            KullanicilarSource.Fill();

            gbCalisanKontrol.Show();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            gbCalisanInfo.Show();
            gbCalisanSearch.Hide();
            gbCalisanSelect.Hide();

            btnCalisanEkle.Show();
            btnCalisanDegistir.Hide();
            btnCalisanSil.Hide();

            calisanList.Hide();
        }
        private void calisanDuzenle_Click(object sender, EventArgs e)
        {
            gbCalisanSearch.Location = new Point(10, 340);

            KullanicilarSource.Fill();

            gbCalisanKontrol.Show();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            gbCalisanInfo.Show();
            gbCalisanSearch.Show();
            gbCalisanSelect.Show();

            btnCalisanEkle.Hide();
            btnCalisanDegistir.Show();
            btnCalisanSil.Hide();

            calisanList.Show();

        }
        private void calisanSil_Click(object sender, EventArgs e)
        {
            gbCalisanSearch.Location = new Point(10, 340);

            KullanicilarSource.Fill();

            gbCalisanKontrol.Show();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            gbCalisanInfo.Show();
            gbCalisanSearch.Show();
            gbCalisanSelect.Show();

            btnCalisanEkle.Hide();
            btnCalisanDegistir.Hide();
            btnCalisanSil.Show();

            calisanList.Show();
        }
        #endregion

        #region Çalışan İşlem Butonları

        private void calisanEklebtn_Click(object sender, EventArgs e)
        {
            string kullaniciAdi = tbCalisanKullaniciAdi.Text;
            string sifre = tbCalisanSifre.Text;
            string ad = tbCalisanAd.Text;
            string soyad = tbCalisanSoyad.Text;
            string cinsiyet = cbCalisanCinsiyet.Text;
            string pozisyon = cbCalisanPozisyon.Text;
            string tcno = tbCalisanTcno.Text;
            string telefon = tbCalisanTelefon.Text;
            string adres = tbCalisanAdres.Text;

            if (decimal.TryParse(tbCalisanMaas.Text, out decimal maas))
            {
                if (maas < 0)
                {
                    MessageBox.Show("Çalışan Maaşı Negatif Olamaz.");
                    return;
                }
            }
            else
            {
                MessageBox.Show("Çalışan Maaşı Bir Sayı Olmalıdır.");
                return;
            }

            Kullanici calisan = new Kullanici(kullaniciAdi, sifre, ad, soyad, cinsiyet, pozisyon, tcno, telefon, adres, maas);

            MessageBox.Show(calisan.Ekle());
            KisiGuncelle();
            KisiTemizle();
        }

        private void CalisanDegistirbtn_Click(object sender, EventArgs e)
        {
            calisan.KullaniciAdi = tbCalisanKullaniciAdi.Text;
            calisan.Sifre = tbCalisanSifre.Text;
            calisan.Ad = tbCalisanAd.Text;
            calisan.Soyad = tbCalisanSoyad.Text;
            calisan.Cinsiyet = cbCalisanCinsiyet.Text;
            calisan.Pozisyon = cbCalisanPozisyon.Text;
            calisan.Tcno = tbCalisanTcno.Text;
            calisan.Telefon = tbCalisanTelefon.Text;
            calisan.Adres = tbCalisanAdres.Text;
            calisan.Maas = Convert.ToDecimal(tbCalisanMaas.Text);

            MessageBox.Show(calisan.Degistir());
            KisiGuncelle();
            KisiTemizle();
        }

        private void calisanSilbtn_Click(object sender, EventArgs e)
        {
            if (tbCalisanKullaniciAdi.Text == "")
            {
                MessageBox.Show("Önce Silinecek Çalışanı Seçmelisin");
            }
            else
            {
                MessageBox.Show(calisan.Sil());
                KisiGuncelle();
                KisiTemizle();
            }
        }

        private void calisanSelectbtn_Click(object sender, EventArgs e)
        {
            using (var connection = new SQLiteConnection(connectionString))
            {
                connection.Open();

                string selectCommand = $"SELECT * FROM Kullanicilar WHERE Id = @id";
                var command = new SQLiteCommand(selectCommand, connection);
                command.Parameters.AddWithValue("@id", tbCalisanSecim.Text);

                SQLiteDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    var input = reader.GetValues();
                    int id = reader.GetInt32(0);
                    string kullaniciAdi = reader.GetString(1);
                    string sifre = reader.GetString(2);
                    string ad = reader.GetString(3);
                    string soyad = reader.GetString(4);
                    string cinsiyet = reader.GetString(5);
                    string pozisyon = reader.GetString(6);
                    string tcno = reader.GetString(7);
                    string telefon = reader.GetString(8);
                    string adres = reader.GetString(9);
                    decimal maas = reader.GetInt32(10);

                    Kullanici calisan = new Kullanici(id, kullaniciAdi, sifre, ad, soyad, cinsiyet, pozisyon, tcno, telefon, adres, maas);
                    this.calisan = calisan;
                }
                connection.Close();

                tbCalisanKullaniciAdi.Text = calisan.KullaniciAdi;
                tbCalisanSifre.Text = calisan.Sifre;
                tbCalisanAd.Text = calisan.Ad;
                tbCalisanSoyad.Text = calisan.Soyad;
                cbCalisanCinsiyet.Text = calisan.Cinsiyet;
                cbCalisanPozisyon.Text = calisan.Pozisyon;
                tbCalisanTcno.Text = calisan.Tcno;
                tbCalisanTelefon.Text = calisan.Telefon;
                tbCalisanAdres.Text = calisan.Adres;
                tbCalisanMaas.Text = calisan.Maas.ToString();

            }
        }

        private void calisanSearchtb_TextChanged(object sender, EventArgs e)
        {
            string selectWantedCommand = "SELECT * FROM Kullanicilar";

            var adapter = new SQLiteDataAdapter();
            var dataTable = new DataTable();


            if (tbCalisanArama.Text != "")
            {
                switch (cbCalisanArama.SelectedIndex)
                {
                    case 0:
                        {
                            selectWantedCommand += $" WHERE Id like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 1:
                        {
                            selectWantedCommand += $" WHERE KullaniciAdi like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 2:
                        {
                            selectWantedCommand += $" WHERE Sifre like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 3:
                        {
                            selectWantedCommand += $" WHERE Ad like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 4:
                        {
                            selectWantedCommand += $" WHERE Soyad like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 5:
                        {
                            selectWantedCommand += $" WHERE Cinsiyet like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 6:
                        {
                            selectWantedCommand += $" WHERE Pozisyon like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 7:
                        {
                            selectWantedCommand += $" WHERE TCNO like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 8:
                        {
                            selectWantedCommand += $" WHERE TelefonNo like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 9:
                        {
                            selectWantedCommand += $" WHERE EvAdres like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                    case 10:
                        {
                            selectWantedCommand += $" WHERE Maas like '%{tbCalisanArama.Text}%'";
                            break;
                        }
                }
            }
            else
            {
                selectWantedCommand = "SELECT * FROM Kullanicilar";
            }

            using (var connection = new SQLiteConnection(connectionString))
            {
                using (var command = new SQLiteCommand(selectWantedCommand, connection))
                {

                    adapter.SelectCommand = command;
                    adapter.Fill(dataTable);
                    calisanList.DataSource = dataTable;
                }
            }
        }
        #endregion

        #region Ürün Menüsü
        // Ürün menüsü butonları
        private void urunListele_Click(object sender, EventArgs e)
        {
            urunBulmagb.Location = new Point(10, 10);

            UrunlerSource.Fill();

            gbCalisanKontrol.Hide();
            gbUrunKontrol.Show();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            urunBilgigb.Hide();
            urunSelectgb.Hide();
            urunBulmagb.Show();

            urunEditList.Show();

        }
        // Yan panel ürün ekleme butonu
        private void urunEkle_Click(object sender, EventArgs e)
        {
            urunBulmagb.Location = new Point(10, 260);

            UrunlerSource.Fill();

            gbCalisanKontrol.Hide();
            gbUrunKontrol.Show();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            urunBilgigb.Show();
            urunSelectgb.Hide();
            urunBulmagb.Hide();

            eklebtn.Show();
            silbtn.Hide();
            degistirbtn.Hide();

            urunEditList.Hide();
            UrunlerSource.Fill();
        }
        // Yan panel ürün düzenleme butonu
        private void urunDuzenle_Click(object sender, EventArgs e)
        {
            urunBulmagb.Location = new Point(10, 260);

            UrunlerSource.Fill();

            gbCalisanKontrol.Hide();
            gbUrunKontrol.Show();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            urunBilgigb.Show();
            urunSelectgb.Show();
            urunBulmagb.Show();

            eklebtn.Hide();
            silbtn.Hide();
            degistirbtn.Show();

            urunEditList.Show();
            UrunlerSource.Fill();
        }
        // Yan panel ürün silme butonu
        private void urunSil_Click(object sender, EventArgs e)
        {
            urunBulmagb.Location = new Point(10, 260);

            UrunlerSource.Fill();

            gbCalisanKontrol.Hide();
            gbUrunKontrol.Show();           
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();

            urunBilgigb.Show();
            urunSelectgb.Show();
            urunBulmagb.Show();

            eklebtn.Hide();
            silbtn.Show();
            degistirbtn.Hide();

            urunEditList.Show();
            UrunlerSource.Fill();
        }
        #endregion

        #region Ürün İşlem Butonları

        // 'Ekle' Butonu eventleri
        private void UrunEkleBtn_Click(object sender, EventArgs e)
        {
            string marka = tbUrunMarka.Text;
            string ad = tbUrunAd.Text;
            string tur = tbUrunTur.Text;


            if (decimal.TryParse(tbUrunAlisFiyat.Text, out decimal alisFiyat))
            {
                if (alisFiyat < 0)
                {
                    MessageBox.Show("Alış Fiyatı Negatif Olamaz.");
                    return;

                }               
            }
            else
            {
                MessageBox.Show("Alış Fiyatı Bir Sayı Olmalıdır.");
                return;
            }

            if (decimal.TryParse(tbUrunSatisFiyat.Text, out decimal satisFiyat))
            {
                if (satisFiyat < 0)
                {
                    MessageBox.Show("Satış Fiyatı Negatif Olamaz.");
                    return;
                }               
            }
            else
            {
                MessageBox.Show("Satış Fiyatı Bir Sayı Olmalıdır.");
                return;
            }

            if (int.TryParse(tbUrunIndirim.Text, out int indirim))
            {
                if (indirim < 0)
                {
                    MessageBox.Show("Indirim Oranı Negatif Olamaz.");
                    return;
                }            
            }
            else
            {
                MessageBox.Show("İndirim Oranı Bir Sayı Olmalıdır.");
                return;
            }

            decimal indirimliFiyat = satisFiyat - (satisFiyat * indirim /100);

            Urun urun = new Urun(marka, ad, tur, alisFiyat, satisFiyat, indirim, indirimliFiyat);
            MessageBox.Show(urun.Ekle());

            UrunTemizle();
            UrunGuncelle();
        }

        // 'Değiştir' Butonu eventleri
        private void degistirbtn_Click(object sender, EventArgs e)
        {
            if (decimal.TryParse(tbUrunAlisFiyat.Text, out decimal alisFiyat))
            {
                if (alisFiyat > 0)
                {
                    urun.AlisFiyat = alisFiyat;
                }
                else
                {
                    MessageBox.Show("Satış Fiyatı Negatif Olamaz.");
                    return;
                }             
            }
            else
            {
                MessageBox.Show("Alış Fiyatı Bir Sayı Olmalıdır.");
                return;
            }
            if (decimal.TryParse(tbUrunSatisFiyat.Text, out decimal satisFiyat))
            {
                if (satisFiyat > 0)
                {
                    urun.SatisFiyat = satisFiyat;
                }
                else
                {
                    MessageBox.Show("Satış Fiyatı Negatif Olamaz.");
                    return;
                }
            
            }
            else
            {
                MessageBox.Show("Satış Fiyatı Bir Sayı Olmalıdır.");
                return;
            }
            if (int.TryParse(tbUrunIndirim.Text, out int indirim))
            {
                if( indirim > 0)
                {
                    urun.IndirimOrani = indirim;
                }
                else
                {
                    MessageBox.Show("Indirim Oranı Negatif Olamaz.");
                    return;
                }

            }
            else
            {
                MessageBox.Show("İndirim Oranı Bir Sayı Olmalıdır.");
                return;
            }

            urun.IndirimliFiyat = satisFiyat;

            MessageBox.Show(urun.Degistir());
            UrunGuncelle();
            UrunTemizle();

        }

        // 'Sil' Butonu eventleri
        private void silbtn_Click(object sender, EventArgs e)
        {
            MessageBox.Show(urun.Sil());
            UrunGuncelle();
            UrunTemizle();
        }

        // Ürün Seçim Olayı
        private void urunSelectbtn_Click(object sender, EventArgs e)
        {

            if (urunSelecttb.Text == "")
            {
                MessageBox.Show("Id girişi boş olamaz!");
                return;
            }
            if (int.TryParse(urunSelecttb.Text, out int id))
            {
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();

                    string selectCommand = $"SELECT * FROM urunler WHERE Id = @id";
                    var command = new SQLiteCommand(selectCommand, connection);
                    command.Parameters.AddWithValue("@id", id);

                    SQLiteDataReader reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        id = reader.GetInt32(0);
                        string marka = reader.GetString(1);
                        string ad = reader.GetString(2);
                        string tur = reader.GetString(3);

                        decimal alisFiyat = reader.GetDecimal(4);
                        decimal satisFiyat = reader.GetDecimal(5);
                        int indirimOrani = reader.GetInt32(6);
                        decimal indirimliFiyat = reader.GetInt32(7);
                        int stok = reader.GetInt32(8);

                        Urun urun = new Urun(id, marka, ad, tur, alisFiyat, satisFiyat, indirimOrani, indirimliFiyat, stok);

                        tbUrunMarka.Text = urun.Marka;
                        tbUrunAd.Text = urun.Ad;
                        tbUrunTur.Text = urun.Tur;
                        tbUrunAlisFiyat.Text = urun.AlisFiyat.ToString();
                        tbUrunSatisFiyat.Text = urun.SatisFiyat.ToString();
                        tbUrunIndirim.Text = urun.IndirimOrani.ToString();

                        this.urun = urun;

                    }
                }
            }
            else
            {
                MessageBox.Show("Id Bir Sayı Olmalıdır.");
            }



        }

        // Ürün Arama Olayı
        private void urunSearchtb_TextChanged(object sender, EventArgs e)
        {
            string selectWantedCommand = "SELECT * FROM Urunler";

            var adapter = new SQLiteDataAdapter();
            var dataTable = new DataTable();

            if (urunSearchtb.Text != "")
            {
                switch (urunSearchcb.SelectedIndex)
                {
                    case 0:
                        {

                            selectWantedCommand += $" WHERE Id like '%{urunSearchtb.Text}%'";

                            break;
                        }
                    case 1:
                        {
                            selectWantedCommand += $" WHERE Marka like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 2:
                        {
                            selectWantedCommand += $" WHERE Ad like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 3:
                        {
                            selectWantedCommand += $" WHERE Tur like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 4:
                        {
                            selectWantedCommand += $" WHERE AlisFiyat like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 5:
                        {
                            selectWantedCommand += $" WHERE SatisFiyat like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 6:
                        {
                            selectWantedCommand += $" WHERE IndirimOrani like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 7:
                        {
                            selectWantedCommand += $" WHERE IndirimliFiyat like '%{urunSearchtb.Text}%'";
                            break;
                        }
                    case 8:
                        {
                            selectWantedCommand += $" WHERE StokMiktari like '%{urunSearchtb.Text}%'";
                            break;
                        }
                }
            }
            else
            {
                selectWantedCommand = "SELECT * FROM Urunler";
            }

            using (var connection = new SQLiteConnection(connectionString))
            {
                using (var command = new SQLiteCommand(selectWantedCommand, connection))
                {

                    adapter.SelectCommand = command;
                    adapter.Fill(dataTable);
                    urunEditList.DataSource = dataTable;
                }
            }
        }

       
        #endregion

        #region Stok Kontrol Menüsü

        private void stokEkle_Click(object sender, EventArgs e)
        {
            gbCalisanKontrol.Hide();
            gbUrunKontrol.Hide();
            gbStokKontrol.Show();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();
        }
        private void stokSil_Click(object sender, EventArgs e)
        {
            gbCalisanKontrol.Hide();
            gbUrunKontrol.Hide();
            gbStokKontrol.Show();
            gbSatisKontrol.Hide();
            gbHesapAyari.Hide();
        }

        #endregion

        #region Satış Kontrol Menüsü

        private void satısEkle_Click(object sender, EventArgs e)
        {
            gbCalisanKontrol.Hide();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Show();
            gbHesapAyari.Hide();
        }

        private void satisSil_Click(object sender, EventArgs e)
        {
            gbCalisanKontrol.Hide();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Show();
            gbHesapAyari.Hide();
        }

        private void satisListele_Click(object sender, EventArgs e)
        {
            gbCalisanKontrol.Hide();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Show();
            gbHesapAyari.Hide();
        }

        #endregion

        #region Hesap Ayarı

        private void hesapAyari_Click(object sender, EventArgs e)
        {
            TextBox textbox = new TextBox();
            textbox.TextChanged += new EventHandler(textChanged);
            textbox.TextChanged += new EventHandler(SifreChanged);

            gbCalisanKontrol.Hide();
            gbUrunKontrol.Hide();
            gbStokKontrol.Hide();
            gbSatisKontrol.Hide();
            gbHesapAyari.Show();

            tbHesapAd.Text = kullanici.Ad;
            tbHesapSoyad.Text = kullanici.Soyad;
            tbHesapKullaniciAdi.Text = kullanici.KullaniciAdi;
            tbHesapPozisyon.Text = kullanici.Pozisyon;
            cbHesapCinsiyet.Text = kullanici.Cinsiyet;
            tbHesapTelefon.Text = kullanici.Telefon;
            tbHesapAdres.Text = kullanici.Adres;

            btnHesapKaydet.Enabled = false;

        }

        private void SifreChanged(object sender, EventArgs e)
        {
            btnSifreDegis.Enabled = true;
        }

        private void textChanged(object sender, EventArgs e)
        {
            btnHesapKaydet.Enabled = true;
        }
        private void btnHesapKaydet_Click(object sender, EventArgs e)
        {
            kullanici.Ad = tbHesapAd.Text;
            kullanici.Soyad = tbHesapSoyad.Text;
            kullanici.KullaniciAdi = tbHesapKullaniciAdi.Text;
            kullanici.Cinsiyet = cbHesapCinsiyet.Text;
            kullanici.Telefon = tbHesapTelefon.Text;
            kullanici.Adres = tbHesapAdres.Text;
            MessageBox.Show(kullanici.Degistir());
        }

        private void btnSifreDegis_Click(object sender, EventArgs e)
        {
            if (tbYeniSifre.Text != tbYeniSifreTekrar.Text)
            {
                MessageBox.Show("Yeni Şifre Uyuşmamaktadır.");
                return;
            }
            if (tbYeniSifre.TextLength < 5)
            {
                MessageBox.Show( "Yeni Şifre 5 Karakterden Uzun Olmalıdır.");
                return;
            }
            if (tbMevcutSifre.Text != kullanici.Sifre)
            {
                MessageBox.Show("Mevcut Şifre Yanlış");
                return;
            }
            kullanici.Sifre = tbYeniSifre.Text;
            MessageBox.Show(kullanici.Degistir());
        }

        #endregion

        // Çalışan Listesini Güncellemeye Yarayan Metot
        public void KisiGuncelle()
        {
            using (var connection = new SQLiteConnection(connectionString))
            {
                using (var command = new SQLiteCommand(kisiSelectCmd, connection))
                {
                    adapter.SelectCommand = command;
                    adapter.Fill(dataTable);
                    calisanList.DataSource = dataTable;
                }
            }
        }

        // Ürün Listesini Güncellemeye Yarayan Metot
        public void UrunGuncelle()
        {
            using (var connection = new SQLiteConnection(connectionString))
            {
                using (var command = new SQLiteCommand(urunSelectCmd, connection))
                {
                    adapter.SelectCommand = command;
                    adapter.Fill(dataTable);
                    urunEditList.DataSource = dataTable;
                }
            }
        }
        
        // Kişi Işleminden Sonra Girdileri Temizleyen Metot
        public void KisiTemizle()
        {
            tbCalisanKullaniciAdi.Text = "";
            tbCalisanSifre.Text = "";
            tbCalisanAd.Text = "";
            tbCalisanSoyad.Text = "";
            cbCalisanCinsiyet.Text = "";
            cbCalisanPozisyon.Text = "";
            tbCalisanTelefon.Text = "";
            tbCalisanAdres.Text = "";
            tbCalisanMaas.Text = "";         
        }

        // Ürün Işleminden Sonra Girdileri Temizleyen Metot
        public void UrunTemizle()
        {
            tbUrunMarka.Text = "";
            tbUrunAd.Text = "";
            tbUrunTur.Text = "";
            tbUrunAlisFiyat.Text = "";
            tbUrunSatisFiyat.Text = "";
            tbUrunIndirim.Text = "";
        }
        private void MainMenu_FormClosed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }

        private void cıkıs_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }        
    }
}